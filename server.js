const express = require("express");
const sqlite3 = require("sqlite3").verbose();
const cors = require("cors");
const bodyParser = require("body-parser");

const app = express();
const db = new sqlite3.Database("shop.db");

app.use(cors());
app.use(express.json());
app.use(express.static("public")); // ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå frontend ‡πÑ‡∏î‡πâ

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Product)
db.run(`
  CREATE TABLE IF NOT EXISTS product (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    image TEXT NOT NULL,
    name TEXT NOT NULL,
    stroage INTEGER NOT NULL,
    price INTEGER NOT NULL
  )
`);

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (Customer)
db.run(`
  CREATE TABLE IF NOT EXISTS customer (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_name TEXT NOT NULL,
    address TEXT NOT NULL,
    phone INTEGER NOT NULL
  )
`);

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (BuyOrder)
db.run(`
  CREATE TABLE IF NOT EXISTS buyorder (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    namef TEXT NOT NULL,
    numbuy INTEGER NOT NULL,
    cost INTEGER NOT NULL,
    total INTEGER NOT NULL,
    status TEXT NOT NULL,
    buy_at TEXT DEFAULT (DATETIME('now', 'localtime'))
  )
`);

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (Bill)
db.run(`
  CREATE TABLE IF NOT EXISTS bill (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_name TEXT NOT NULL,
    address TEXT NOT NULL,
    phone INTEGER NOT NULL,
    name TEXT NOT NULL,
    cost INTEGER NOT NULL,
    numbuy INTEGER NOT NULL,
    total INTEGER NOT NULL,
    status TEXT NOT NULL,
    buy_at TEXT DEFAULT (DATETIME('now', 'localtime'))
  )
`);

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
db.run(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL,
    password TEXT NOT NULL
  )
`);
db.get("SELECT COUNT(*) as count FROM users", [], (err, row) => {
  if (row.count === 0) {
      db.run("INSERT INTO users (username, password) VALUES ('admin', '1234')");
  }
});




// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/products", (req, res) => {
  db.all("SELECT * FROM product", [], (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
app.post("/products", (req, res) => {
  const { image, name, stroage, price } = req.body;
  db.run("INSERT INTO product (image, name, stroage, price) VALUES (?, ?, ?, ?)",
    [image, name, stroage, price],
    function (err) {
      if (err) {
        res.status(500).json({ error: err.message });
        return;
      }
      res.json({ id: this.lastID });
    }
  );
});

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
app.put("/products/:id", (req, res) => {
  const { id } = req.params;
  const { image, name, stroage, price } = req.body;

  db.run(
    "UPDATE product SET image = ?, name = ?, stroage = ?, price = ? WHERE id = ?",
    [image, name, stroage, price, id],
    function (err) {
      if (err) {
        res.status(500).json({ error: err.message });
        return;
      }
      res.json({ updated: this.changes });
    }
  );
});

// ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
app.delete("/products/:id", (req, res) => {
  const { id } = req.params;
  db.run("DELETE FROM product WHERE id = ?", id, function (err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ deleted: this.changes });
  });
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/customers", (req, res) => {
  db.all("SELECT * FROM customer", [], (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
app.post("/customers", (req, res) => {
  let { customer_name, address, phone } = req.body;

  if (!customer_name || !address || !phone || isNaN(phone)) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç" });
  }

  phone = parseInt(phone); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `phone` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

  db.run("INSERT INTO customer (customer_name, address, phone) VALUES (?, ?, ?)",
      [customer_name, address, phone],
      function (err) {
          if (err) {
              return res.status(500).json({ error: err.message });
          }
          res.json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", customerId: this.lastID });
      }
  );
});

app.put("/customers/:id", (req, res) => {
  const { id } = req.params;
  let { customer_name, address, phone } = req.body;

  if (!customer_name || !address || !phone || isNaN(phone)) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç" });
  }

  phone = parseInt(phone); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `phone` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

  db.run(
      "UPDATE customer SET customer_name = ?, address = ?, phone = ? WHERE id = ?",
      [customer_name, address, phone, id],
      function (err) {
          if (err) {
              return res.status(500).json({ error: err.message });
          }
          res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", updated: this.changes });
      }
  );
});



// ‚úÖ ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
app.delete("/customers/:id", (req, res) => {
  const { id } = req.params;
  db.run("DELETE FROM customer WHERE id = ?", id, function (err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ deleted: this.changes });
  });
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/orders", (req, res) => {
  db.all("SELECT * FROM buyorder", [], (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
app.post("/orders", (req, res) => {
  const { namef, numbuy, cost } = req.body;

  const numbuyInt = parseInt(numbuy);
  const costInt = parseInt(cost);
  const total = numbuyInt * costInt;
  const status = "complete"; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ status

  if (isNaN(numbuyInt) || isNaN(costInt) || numbuyInt <= 0 || costInt <= 0) {
      return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  db.run("INSERT INTO buyorder (namef, numbuy, cost, total, status) VALUES (?, ?, ?, ?, ?)",
      [namef, numbuyInt, costInt, total, status],
      function (err) {
          if (err) {
              return res.status(500).json({ error: err.message });
          }
          res.json({ message: "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß", id: this.lastID });
      }
  );
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
app.put("/orders/:id", (req, res) => {
  const { id } = req.params;
  const { namef, numbuy, cost, total, status } = req.body;

  const numbuyInt = parseInt(numbuy);
  const costInt = parseInt(cost);
  const totalInt = parseInt(total);

  if (isNaN(numbuyInt) || isNaN(costInt) || isNaN(totalInt) || numbuyInt <= 0) {
      return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  db.run(
      "UPDATE buyorder SET namef = ?, numbuy = ?, cost = ?, total = ?, status = ? WHERE id = ?",
      [namef, numbuyInt, costInt, totalInt, status, id],
      function (err) {
          if (err) {
              return res.status(500).json({ error: err.message });
          }
          res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", updated: this.changes });
      }
  );
});

// ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
app.delete("/orders/:id", (req, res) => {
  const { id } = req.params;
  db.run("DELETE FROM buyorder WHERE id = ?", id, function (err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ deleted: this.changes });
  });
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/bills", (req, res) => {
  db.all("SELECT * FROM bill", [], (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏´‡∏°‡πà
app.post("/bills", (req, res) => {
  const { customer_name, address, phone, name, cost, numbuy, total, status } = req.body;
  db.run(
    "INSERT INTO bill (customer_name, address, phone, name, cost, numbuy, total, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    [customer_name, address, phone, name, cost, numbuy, total, status],
    function (err) {
      if (err) {
        res.status(500).json({ error: err.message });
        return;
      }
      res.json({ id: this.lastID });
    }
  );
});

// ‚úÖ ‡∏•‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
app.delete("/bills/:id", (req, res) => {
  const { id } = req.params;
  db.run("DELETE FROM bill WHERE id = ?", id, function (err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ deleted: this.changes });
  });
});



// üìå API ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô `customers` ‡πÅ‡∏•‡∏∞ `buyorder`
app.post("/delete-all", (req, res) => {
  db.run("DELETE FROM customer", (err) => {
      if (err) return res.status(500).json({ error: err.message });
  });

  db.run("DELETE FROM sqlite_sequence WHERE name='customer'", (err) => {
      if (err) return res.status(500).json({ error: err.message });
  });

  db.run("DELETE FROM buyorder", (err) => {
      if (err) return res.status(500).json({ error: err.message });
  });

  db.run("DELETE FROM sqlite_sequence WHERE name='buyorder'", (err) => {
      if (err) return res.status(500).json({ error: err.message });
  });

  res.json({ message: "‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
});



  // login----------------------------
// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Login (‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô plaintext)
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  db.get("SELECT * FROM users WHERE username = ? AND password = ?", [username, password], (err, user) => {
      if (err) return res.status(500).json({ error: err.message });
      if (!user) return res.status(401).json({ message: "Invalid username or password" });
      res.json({ message: "Login successful", user });
  });
});


// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(3000, () => {
  console.log("Server running on node77368-env-4775217.proen.app.ruk-com.cloud:11651");
});
